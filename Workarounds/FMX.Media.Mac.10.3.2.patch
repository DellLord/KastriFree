diff -r C:\Program Files (x86)\Embarcadero\Studio\20.0\source\fmx\FMX.Media.Mac.pas Z:\Source\Test\macOSVideo\FMX.Media.Mac.pas
143c143
<   System.RTLConsts, Posix.StdDef;
---
>   System.RTLConsts, Posix.StdDef, Macapi.QuartzCore, System.IOUtils;
151a152,224
> 
> type
>   AVPlayerItemOutputClass = interface(NSObjectClass)
>     ['{3D89BA95-B673-402D-8046-BEE1763D9FF3}']
>   end;
> 
>   AVPlayerItemOutput = interface(NSObject)
>     ['{D2175E46-20A7-4F62-9D52-714CB52DE422}']
>     function itemTimeForCVTimeStamp(timestamp: CVTimeStamp): CMTime; cdecl;
>     function itemTimeForHostTime(hostTimeInSeconds: CFTimeInterval): CMTime; cdecl;
>     function itemTimeForMachAbsoluteTime(machAbsoluteTime: Int64): CMTime; cdecl;
>     procedure setSuppressesPlayerRendering(suppressesPlayerRendering: Boolean); cdecl;
>     function suppressesPlayerRendering: Boolean; cdecl;
>   end;
>   TAVPlayerItemOutput = class(TOCGenericImport<AVPlayerItemOutputClass, AVPlayerItemOutput>) end;
> 
>   AVPlayerItemVideoOutputClass = interface(AVPlayerItemOutputClass)
>     ['{99EF1ABB-428A-44FE-B732-3A5CFF735C16}']
>   end;
> 
>   AVPlayerItemVideoOutput = interface(AVPlayerItemOutput)
>     ['{C25F9FB1-E515-4490-88E4-9D734088EF4D}']
>     function initWithPixelBufferAttributes(pixelBufferAttributes: NSDictionary): Pointer; cdecl;
>     function initWithOutputSettings(outputSettings: NSDictionary): Pointer; cdecl;
>     function hasNewPixelBufferForItemTime(itemTime: CMTime): Pointer; cdecl;
>     function copyPixelBufferForItemTime(itemTime: CMTime; itemTimeForDisplay: Pointer): CVPixelBufferRef; cdecl;
>     procedure setDelegate(delegate: Pointer; queue: dispatch_queue_t); cdecl;
>     procedure requestNotificationOfMediaDataChangeWithAdvanceInterval(interval: NSTimeInterval); cdecl;
>     function delegate: Pointer; cdecl;
>     function delegateQueue: dispatch_queue_t; cdecl;
>   end;
>   TAVPlayerItemVideoOutput = class(TOCGenericImport<AVPlayerItemVideoOutputClass, AVPlayerItemVideoOutput>) end;
> 
>   AVPlayerItem = interface(Macapi.AVFoundation.AVPlayerItem)
>     ['{3656A2CF-37D9-48A1-A51D-281E9DEDA8B5}']
>     procedure addOutput(output: AVPlayerItemOutput); cdecl;
>   end;
>   TAVPlayerItem = class(TOCGenericImport<AVPlayerItemClass, AVPlayerItem>) end;
> 
>   TMacMedia = class(TMedia)
>   private
>     FPixelBufferBitmap: TBitmap;
>     FPlayer: AVPlayer;
>     FPlayerItem: AVPlayerItem;
>     FPlayerLayer: AVPlayerLayer;
>     FPlayerVideoOutput: AVPlayerItemVideoOutput;
>     FVideoView: NSView;
>     function GetAspectRatio: Single;
>     function GetNominalFrameRate: Single;
>     function GetVideoTrack: AVAssetTrack;
>     procedure SetupVideoOutput;
>   protected
>     procedure DoPlay; override;
>     procedure DoStop; override;
>     function GetCurrent: TMediaTime; override;
>     function GetDuration: TMediaTime; override;
>     function GetMediaState: TMediaState; override;
>     function GetVideoSize: TPointF; override;
>     function GetVolume: Single; override;
>     function QueryInterface(const IID: TGUID; out Obj): HResult; override;
>     procedure SetCurrent(const Value: TMediaTime); override;
>     procedure SetVolume(const Value: Single); override;
>     procedure UpdateMediaFromControl; override;
>     property PlayerVideoOutput: AVPlayerItemVideoOutput read FPlayerVideoOutput;
>   public
>     constructor Create(const AFileName: string); override;
>     destructor Destroy; override;
>   end;
> 
>   TMacMediaCodec = class(TCustomMediaCodec)
>   public
>     function CreateFromFile(const AFileName: string): TMedia; override;
>   end;
696a770,1002
> { TMacMedia }
> 
> constructor TMacMedia.Create(const AFileName: string);
> var
>   LURL: NSUrl;
>   LAbsoluteFileName: string;
> begin
>   inherited Create(AFileName);
>   AVMediaTypeAudio; // Force load the framework
>   if FileExists(FileName) then
>   begin
>     if ExtractFilePath(FileName).IsEmpty then
>       LAbsoluteFileName := TPath.Combine(TPath.GetHomePath, FileName)
>     else
>       LAbsoluteFileName := FileName;
>     LURL := TNSUrl.Wrap(TNSUrl.OCClass.fileURLWithPath(StrToNSStr(LAbsoluteFileName)));
>   end
>   else
>     LURL := StrToNSUrl(FileName);
>   if LURL = nil then
>     raise EFileNotFoundException.Create(SFileNotFound);
>   FPixelBufferBitmap := TBitmap.Create;
>   FPlayerItem := TAVPlayerItem.Wrap(TAVPlayerItem.OCClass.playerItemWithURL(LURL));
>   FPlayerItem.retain;
>   FPlayer := TAVPlayer.Wrap(TAVPlayer.OCClass.playerWithPlayerItem(FPlayerItem));
>   FPlayer.retain;
>   FPlayerLayer := TAVPlayerLayer.Wrap(TAVPlayerLayer.OCClass.playerLayerWithPlayer(FPlayer));
>   FPlayerLayer.retain;
>   FPlayerLayer.setVideoGravity(CocoaNSStringConst(libAVFoundation, 'AVLayerVideoGravityResizeAspectFill'));
>   FPlayerLayer.setAutoresizingMask(kCALayerWidthSizable or kCALayerHeightSizable);
>   FVideoView := TNSView.Create;
>   FVideoView.retain;
>   FVideoView.setWantsLayer(True);
>   FVideoView.layer.addSublayer(FPlayerLayer);
>   SetupVideoOutput;
> end;
> 
> destructor TMacMedia.Destroy;
> begin
>   if FPlayerVideoOutput <> nil then
>     FPlayerVideoOutput.release;
>   FPlayerVideoOutput := nil;
>   FPixelBufferBitmap.Free;
>   if FVideoView <> nil then
>   begin
>     FVideoView.setHidden(True);
>     FVideoView.release;
>   end;
>   FVideoView := nil;
>   if FPlayerLayer <> nil then
>   begin
>     FPlayerLayer.removeFromSuperlayer;
>     FPlayerLayer.release;
>   end;
>   FPlayerLayer := nil;
>   if FPlayer <> nil then
>     FPlayer.release;
>   FPlayer := nil;
>   if FPlayerItem <> nil then
>     FPlayerItem.release;
>   FPlayerItem := nil;
>   inherited;
> end;
> 
> procedure TMacMedia.DoPlay;
> begin
>   FPlayer.play;
>   UpdateMediaFromControl;
> end;
> 
> procedure TMacMedia.DoStop;
> begin
>   FPlayer.pause;
> end;
> 
> function TMacMedia.GetAspectRatio: Single;
> var
>   LTrack: AVAssetTrack;
> begin
>   Result := 0;
>   LTrack := GetVideoTrack;
>   if LTrack <> nil then
>     Result := LTrack.naturalSize.width / LTrack.naturalSize.height;
> end;
> 
> function TMacMedia.GetCurrent: TMediaTime;
> begin
>   if FPlayerItem.currentTime.timeScale <> 0 then
>     Result := Trunc(FPlayerItem.currentTime.Value / FPlayerItem.currentTime.timeScale * MediaTimeScale)
>   else
>     Result := 0;
> end;
> 
> function TMacMedia.GetDuration: TMediaTime;
> begin
>   if FPlayerItem.duration.timeScale <> 0 then
>     Result := Trunc(FPlayerItem.duration.Value / FPlayerItem.duration.timeScale * MediaTimeScale)
>   else
>     Result := 0;
> end;
> 
> function TMacMedia.GetMediaState: TMediaState;
> begin
>   if FPlayer.status <> AVPlayerStatusFailed then
>   begin
>     if (FPlayer.Rate > 0) then
>       Result := TMediaState.Playing
>     else
>       Result := TMediaState.Stopped
>   end
>   else
>     Result := TMediaState.Unavailable;
> end;
> 
> function TMacMedia.GetNominalFrameRate: Single;
> var
>   LTrack: AVAssetTrack;
> begin
>   Result := 0;
>   LTrack := GetVideoTrack;
>   if LTrack <> nil then
>     Result := LTrack.nominalFrameRate;
> end;
> 
> function TMacMedia.GetVideoSize: TPointF;
> begin
>   Result := PointF(FPlayerItem.presentationSize.width, FPlayerItem.presentationSize.height)
> end;
> 
> function TMacMedia.GetVideoTrack: AVAssetTrack;
> var
>   LTracks: NSArray;
> begin
>   Result := nil;
>   if FPlayer.currentItem <> nil then
>   begin
>     LTracks := FPlayer.currentItem.asset.tracksWithMediaType(AVMediaTypeVideo);
>     if LTracks.count > 0 then
>       Result := TAVAssetTrack.Wrap(LTracks.objectAtIndex(0));
>   end;
> end;
> 
> function TMacMedia.GetVolume: Single;
> begin
>   Result := FPlayer.volume;
> end;
> 
> function TMacMedia.QueryInterface(const IID: TGUID; out Obj): HResult;
> begin
>   Result := E_NOTIMPL;
>   if (FVideoView <> nil) and (FVideoView.QueryInterface(IID, Obj) = S_OK) then
>     Exit(S_OK);
>   if (FPlayer <> nil) and (FPlayer.QueryInterface(IID, Obj) = S_OK) then
>     Exit(S_OK);
>   if (FPlayerLayer <> nil) and (FPlayerLayer.QueryInterface(IID, Obj) = S_OK) then
>     Exit(S_OK);
>   if (FPlayerItem <> nil) and (FPlayerItem.QueryInterface(IID, Obj) = S_OK) then
>     Exit(S_OK);
> end;
> 
> procedure TMacMedia.SetCurrent(const Value: TMediaTime);
> begin
>   FPlayer.seekToTime(CMTimeMake(Value, MediaTimeScale));
> end;
> 
> procedure TMacMedia.SetupVideoOutput;
> var
>   LPixelBufferAttributes: NSDictionary;
>   LPixelFormatType: Pointer;
> begin
>   LPixelFormatType := TNSNumber.OCClass.numberWithInt(kCVPixelFormatType_32BGRA);
>   LPixelBufferAttributes := TNSDictionary.Wrap(TNSDictionary.OCClass.dictionaryWithObject(LPixelFormatType, Pointer(kCVPixelBufferPixelFormatTypeKey)));
>   FPlayerVideoOutput := TAVPlayerItemVideoOutput.Create;
>   FPlayerVideoOutput.retain;
>   FPlayerVideoOutput.initWithPixelBufferAttributes(LPixelBufferAttributes);
>   FPlayerVideoOutput.requestNotificationOfMediaDataChangeWithAdvanceInterval(0.1);
>   FPlayerItem.addOutput(FPlayerVideoOutput);
> end;
> 
> procedure TMacMedia.SetVolume(const Value: Single);
> begin
>   FPlayer.setVolume(Value);
> end;
> 
> procedure TMacMedia.UpdateMediaFromControl;
> var
>   LForm: TCommonCustomForm;
>   LFormView: NSView;
>   LBounds: TRectF;
>   LMultiplier, LDiff: Single;
> begin
>   if (Control <> nil) and (Control.Root <> nil) and (Control.Root.GetObject is TCommonCustomForm) then
>   begin
>     LForm := TCommonCustomForm(Control.Root.GetObject);
>     if Control.ParentedVisible then
>       LBounds := Control.BoundsRect
>     else
>       // Move it into invisible area - Making it invisible by calling setHidden will stop playing media
>       LBounds := TRectF.Create(-2, -2, -1, -1);
>     LBounds.Fit(Control.AbsoluteRect);
>     if GetAspectRatio <> 0 then
>     begin
>       LMultiplier := (LBounds.Width / LBounds.Height) / GetAspectRatio;
>       if LMultiplier < 1 then
>       begin
>         LDiff := (LBounds.Height - (LBounds.Height * LMultiplier)) / 2;
>         LBounds.Top := LDiff;
>         LBounds.Bottom := LBounds.Bottom - LDiff;
>       end
>       else if LMultiplier > 1 then
>       begin
>         LDiff := (LBounds.Width - (LBounds.Width * (1 / LMultiplier))) / 2;
>         LBounds.Left := LDiff;
>         LBounds.Right := LBounds.Right - LDiff;
>       end;
>     end;
>     LFormView := WindowHandleToPlatform(LForm.Handle).View;
>     LFormView.addSubview(FVideoView);
>     FVideoView.setFrame(MakeNSRect(LBounds.Left, LForm.ClientHeight - LBounds.Bottom, LBounds.Width, LBounds.Height));
>     FPlayerLayer.setFrame(FVideoView.bounds);
>     FVideoView.setHidden(False);
>   end
>   else
>     FVideoView.setHidden(True);
> end;
> 
> { TMacMediaCodec }
> 
> function TMacMediaCodec.CreateFromFile(const AFileName: string): TMedia;
> begin
>   Result := TMacMedia.Create(AFileName);
> end;
> 
698,701c1004,1007
<   TMediaCodecManager.RegisterMediaCodecClass('.mov', SVMOVFiles, TMediaType.Video, TQTMediaCodec);
<   TMediaCodecManager.RegisterMediaCodecClass('.m4v', SVM4VFiles, TMediaType.Video, TQTMediaCodec);
<   TMediaCodecManager.RegisterMediaCodecClass('.mp4', SVMP4Files, TMediaType.Video, TQTMediaCodec);
<   TMediaCodecManager.RegisterMediaCodecClass('.avi', SVAviFiles, TMediaType.Video, TQTMediaCodec);
---
>   TMediaCodecManager.RegisterMediaCodecClass('.mov', SVMOVFiles, TMediaType.Video, TMacMediaCodec);
>   TMediaCodecManager.RegisterMediaCodecClass('.m4v', SVM4VFiles, TMediaType.Video, TMacMediaCodec);
>   TMediaCodecManager.RegisterMediaCodecClass('.mp4', SVMP4Files, TMediaType.Video, TMacMediaCodec);
>   TMediaCodecManager.RegisterMediaCodecClass('.avi', SVAviFiles, TMediaType.Video, TMacMediaCodec);
